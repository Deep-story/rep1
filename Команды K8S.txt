API входная точка в кубернетес, мозг.

etcd сторедж, хранение всех настроек, состояний и т.д точка правды.

kublet(смотрит в api) работает на каждой ноде(ворк и мастер), он как агент. Смотрит за много чем, нпр состоянием, так же видит что нужно заупстить новый контейнер и передает эту инфу докер демону

Pod минимальная абстракция (ребенок), внутри как минимум с запущенным контейнером будет еще один контйнер пауз, который делает шару сети внутри контейнера. 1 под 1 контейнер. 

Поды с одинаковым именем в кубе не запускаются.

reblicaset это абстракция (родитель пода), управляет в каком количестве наше приложени должно запускаться лейблы используются для упрощения поиска или какие реплики, какая нода, для более гибкой работы с обьектами. А селекторо это инструкция для репликасета, по ней репликасет понимает какие ноды его.

deployment это абстракция (родитель репликасета)


kubectl create -f replicaset.yaml говорим кубу создать под из файла
Второй раз нельзя создать, поэтому прменяется команда
kubectl apply -f replicaset.yaml

kubectl get pod показывает запущенные поды
kubectl get pod --show-labels покажет лейблы бегущих подов
ключ -w позволить в реальном времени наблюдать 

kubectl completion загружаем , позволит пользоватся табом как в линухе

kubectl delete -f имя файла, удалит то, что создалось данным файлом
kubectl delete имя пода удалит под с именем
kubectl delete -all удалит все поды

kubectl get replicaset

kubectl get deployment

kubectl scale --replicas=2 replicaset my-replicaset установит количество реплик в данном репликосете в значение 2

kubectl describe replicaset my-replicaset команда которая покажет нам некую полезную информацию

kubectl rollout undo deployment имя деплоймента , позволит вернутся на предыдущую версию
kubectl rollout undo deployment my-deployment --to-revision=1 откатится на 2 версии назад

kubectl logs name deployment выведет логи указанного деплоя

ubectl explain имя абстракции описывает все о нужной абстракции








