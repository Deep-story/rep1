API входная точка в кубернетес, мозг.

etcd сторедж, хранение всех настроек, состояний и т.д точка правды.

kublet(смотрит в api) работает на каждой ноде(ворк и мастер), он как агент. Смотрит за много чем, нпр состоянием, так же видит что нужно заупстить новый контейнер и передает эту инфу докер демону

Pod минимальная абстракция (ребенок), внутри как минимум с запущенным контейнером будет еще один контйнер пауз, который делает шару сети внутри контейнера. 1 под 1 контейнер. 

Поды с одинаковым именем в кубе не запускаются.

reblicaset это абстракция (родитель пода), управляет в каком количестве наше приложени должно запускаться лейблы используются для упрощения поиска или какие реплики, какая нода, для более гибкой работы с обьектами. А селекторо это инструкция для репликасета, по ней репликасет понимает какие ноды его.

deployment это абстракция (родитель репликасета)

ConfigMap хранит настройки нашего приложения

Secret хранит чуствительную информацию, токены пароли и т.д, хранится в закодированном виде base64
base64 -d раскодировать можно. tls for ingress https

Service используется, т.к у подов разные ip, и для балансировки трафика между ними используется сервис. Автоматически при создании сервеса создается обьект ендпоинстс. Передают трафик только внутри нашего кластера.

Ingress используется для получения запросов внутрь кластера из интернета(вне), по протоколу http

PV, PVC для хранения данных, 1 том на котором хранятся данные, 2 это запрос на подключения такого тома.

storageclass это манифест описывающий доступ к провайдеру хранения данных. Провизионер прописывается тут

PV provisioners программа которая работает с схд, по запросу pvc создает том нужного размера, далее идет в кластер и создает манифест на создание pv. Таким образом происходит автоматизация.

Компоненты кластера кубера: Etcd, API server, controller-manager, scheduler, kubelet, kube-proxy
Доп.компоненты, (пофигу каким из способов будут реализованы) Контейниризация, сеть, DNS.
etcd хранит всю информацию о кластере.

etcd хранит всю информацию о кластере, требует быстрый дисков. слушает клиентов на 2379, между собой общается на 2380.

api server это центральный компонет кубера, через него все общаются, (единственный кто напрямую взаимодействует с etcd). Это REST api. 

controller-manager набор контроллеров (node controller, replication controller, endpoints controller and others) , так же сюда входит GarbageCollector сборщик мусора.

scheduler назначает поды на ноды учитывая QoS, affinity \ anti-affinity, requested resources

kubelet nod агент который работает на всех нодах кластера не зависимо от того мастер нода или воркер нода это. единственный компонент работающий не в докер, а нпр в linux как обычная systemd служба. Отдает команды докер демону. Создает поды, следит за состоянием их, еще делает пробы ливнер и рединас. 

kube-proxy смотрит в апи. Стоит на всех серверах кластера. Управляет сетевыми правилами на нодах.
Фактически реализует service (ipvs and iptables). т.е он создает правила itabples или ipvs для сервиса.

service это статический ip который ему куб выдал из пула адресов, который мы задаем в самом начале.
Так же ему задает dns имя. Представляет собой набор правил iptables или ipvs. Это не прокси.

Network plugin(ex Flannel, Calico). Обеспечивает связь между нодами и подами. Раздает ип адреса подам. 

Ingress контроллер (nginx) это приложение. Доп аддон для кластера.

Ingress это просто манифест в котором описывается а как именно с этим тарафиком работать, не путать. 

Компоненты Controller manager and Scheduler в отказоустойчевом кластере имеют мастера и ученика т.е если 3 мастера, только 1 контроль менеджер и 1 шедулер будут работать, а другие будут задействованы только, если текущие откажут. 

Сетевой плагин организует сеть между подами, нодами, контейнерами. А также выдает им какие-то ип адреса. Создает правила роутинга на серверах.
 
DaemonSet абстракция, запускающая на каждом узле по 1 поду, на всех узлах кластера. Если узел добовля то, будет запущен еще на новом узле.

Tolerations концепция как заразa и сопротивляемость. На узел вешается тейнт, он объявляется заразным. У тейнта есть ключ, значение ключа и эффект. Далее когда скедулер распределяет поды на узлы кластера, он проверяет есть ли у пода толерейшн к той заразе, что есть на узле, если да (т.е ключ такой-то, эффект такой-то)то тогда можно его разместить туда, если нет, то нет. 
Есть 2 эффекта NoSchedule and NoExecute

StatefulSet гарантирует уникальность имен. Гарантирует последовательность запуска, сначало один, потом другой и т.д. Позволяет запустить поды, не с общим для всех PVC, а уникальны для каждого пода и инстанса. 

Affinity указывает на каких нодах запускать наш под.
AntiAffinity

initContainers

Deadless Srvice







kubectl create -f replicaset.yaml говорим кубу создать под из файла
Второй раз нельзя создать, поэтому прменяется команда
kubectl apply -f replicaset.yaml

kubectl get pod показывает запущенные поды
kubectl get pod --show-labels покажет лейблы бегущих подов
ключ -w позволить в реальном времени наблюдать 

kubectl completion загружаем , позволит пользоватся табом как в линухе

kubectl delete -f имя файла, удалит то, что создалось данным файлом
kubectl delete имя пода удалит под с именем
kubectl delete -all удалит все поды

kubectl get replicaset

kubectl get deployment

kubectl scale --replicas=2 replicaset my-replicaset установит количество реплик в данном репликосете в значение 2

kubectl describe replicaset my-replicaset команда которая покажет нам некую полезную информацию

kubectl rollout undo deployment имя деплоймента , позволит вернутся на предыдущую версию
kubectl rollout undo deployment my-deployment --to-revision=1 откатится на 2 версии назад

kubectl logs name deployment выведет логи указанного деплоя

ubectl explain имя абстракции описывает все о нужной абстракции

kubectl port-forward namePod 8005:80 &  позволяет подключится к поду внутри кластера кубера или отправлять данные, первый порт на котором слушает куб контрол, второй порт на котором наш под принимает запросы, & обслуживет вопросы в бекграунде

kubectl create secret generic test --from-literal=test1=asdf создаст секрет с именем тест, из строки со значением asdf

Для расшифровки echo YXNkZg== | base64 -d расшифрует и выдаст asdf

kubectl get service выдаст сервисы
kubectl get endpoint выдаст ендпоинты в котором прописано имя сервиса и ип адреса подов на которые нужно отправлять трафик
















